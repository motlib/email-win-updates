'''Script to check for windows updates and send mail with results.

Copy the cfg_template.yaml to cfg.yaml and adapt the file contents to
your needs.

'''


__docformat__ = 'ReStructuredText'
__author__ = 'Andreas Schroeder <andreas@a-netz.de>'


import argparse
from email.mime.text import MIMEText
import logging
import os
import smtplib
import sys
import textwrap
import win32com.client as win32
import yaml

from cmdlapp import CmdlApp

class EmailWinUpdates(CmdlApp):
    def __init__(self):
        self.cfg = None

        self.cmdlapp_config(has_cfgfile=True)

        
    def get_updates(self, search_crit):
        '''Get a list of available windows updates.

        Use win32com to create an instance of the
        Microsoft.Update.Session COM object and query it for available
        updates.

        @param string search_crit: The search criteria for
          updates. Default is `IsInstalled=0 and IsHidden=0`.

        @returns: A list of update objects.

        '''
        
        updateSession = win32.gencache.EnsureDispatch("Microsoft.Update.Session")
        updateSearcher = updateSession.CreateUpdateSearcher()
        
        searchResult = updateSearcher.Search(search_crit)
    
        return searchResult.Updates
    
    
    def send_no_updates_mail(self):
        '''Send mail with info about no available updates.'''
        
        body = 'Checking for updates was successful. \n' \
               'There are currently no updates to install.'
    
        self.send_mail(body)
    
    
    def send_updates_list_mail(self, updates):
        '''Send mail with list of available updates.'''
        
        body = 'The following windows updates are available:\n\n'
    
        for update in updates:

            title = '* {sev}: {title}'.format(
                sev=update.MsrcSeverity.upper(),
                title=update.Title)
            
            body += textwrap.fill(
                title,
                width=70,
                initial_indent='',
                subsequent_indent='  ')
            
            body += '\n\n'

            body += textwrap.fill(
                update.Description,
                width=70,
                initial_indent='  ',
                subsequent_indent='  ')
            body += '\n\n\n'
    
        self.send_mail(body)
    
        
    def send_update_check_error_mail(self, ex):
        '''Send mail with update check error info.'''
        
        body = 'Failed to check for windows updates:\n'
        body += str(ex)
        
        self.send_mail(body)
        
    
    def send_mail(self, body):
        '''Compose and send the info mail.'''
        
        title = 'Windows Update check for {dom}\{comp}\n\n'.format(
            dom=os.getenv('USERDOMAIN'),
            comp=os.getenv('COMPUTERNAME'))
    
        text = title
        text += body
        text += '\n' \
                '-- \n' \
                'Generated by email-win-updates.py See \n' \
                'http://github.com/motlib/email-win-updates for more info.'

        # You can provide a string or a list of recipients. Here we
        # make sure we have a list for further processing
        if not type(self.cfg['to']) == list:
            self.cfg['to'] = self.cfg['to'].split(',')

        recipients = ', '.join(self.cfg['to'])
            
        msg = MIMEText(text)
    
        msg['Subject'] = title
        msg['From'] = self.cfg['from']
        msg['To'] = recipients
    
        s = smtplib.SMTP(self.cfg['server'], port=self.cfg['port'])
        s.send_message(msg, to_addrs=self.cfg['to'])
        s.quit()

        logging.info('Sent mail to these recipients: {0}'.format(recipients))


    def handle_updates(self, updates):
        '''Take action according to the number of updates found and the 
        configuration settings.'''
        
        if len(updates) > 0:
            # There are updates available. Sent out mail.
            
            msg = 'Found {num} updates. Sending info mail.'
            logging.info(msg.format(num=len(updates)))
            
            # send list of updates
            self.send_updates_list_mail(updates)

        else:
            # There are no updates available.

            if self.cfg['no_updates_mail']:
                # Send mail to tell that no updates are available.

                logging.info('No updates found. Sending info mail.')

                self.send_no_updates_mail()
            else:
                # There are no updates and the user does not want
                # to know.
            
                logging.info('No updates found. No mail sent.')
        
        
    def main_fct(self):
        '''Program entry point. 
    
        Search for updates and send out mail with result.'''
        
        try:
            # Check for updates
            logging.info('Searching for updates...')
            updates = self.get_updates(self.cfg['search_criteria'])
    
            self.handle_updates(updates)
            
            logging.info('Check for updates completed.')
        except Exception as ex:
            self.send_update_check_error_mail(ex)
            logging.exception('Failed to check for windows updates.')
            
            sys.exit(1)
    
            
if __name__ == '__main__':
    ewu = EmailWinUpdates()
    ewu.run()
